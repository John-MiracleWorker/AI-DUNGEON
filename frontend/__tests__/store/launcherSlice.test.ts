import { configureStore } from '@reduxjs/toolkit';
import launcherReducer, {\n  addToRecentGames,\n  setLastPlayed,\n  updateFavoriteGenres,\n  setQuickStartEnabled,\n  addFavoriteGenre,\n  removeFavoriteGenre,\n} from '../../../src/store/launcherSlice';\n\nconst mockGameSession = {\n  session_id: 'test-session',\n  world_state: {\n    location: 'Test Location',\n    inventory: [],\n    character_stats: {},\n  },\n  turn_history: [],\n  quick_actions: [],\n};\n\ndescribe('launcherSlice', () => {\n  let store: ReturnType<typeof configureStore>;\n\n  beforeEach(() => {\n    store = configureStore({\n      reducer: {\n        launcher: launcherReducer,\n      },\n    });\n  });\n\n  it('should handle initial state', () => {\n    const state = store.getState().launcher;\n    \n    expect(state.recentGames).toEqual([]);\n    expect(state.favoriteGenres).toEqual(['fantasy']);\n    expect(state.quickStartEnabled).toBe(true);\n    expect(state.lastPlayedSession).toBeNull();\n    expect(state.isFirstLaunch).toBe(true);\n    expect(state.onboardingCompleted).toBe(false);\n  });\n\n  it('should add game to recent games', () => {\n    store.dispatch(addToRecentGames(mockGameSession));\n    \n    const state = store.getState().launcher;\n    expect(state.recentGames).toHaveLength(1);\n    expect(state.recentGames[0]).toEqual(mockGameSession);\n  });\n\n  it('should move existing game to front when added again', () => {\n    const anotherGame = { ...mockGameSession, session_id: 'another-session' };\n    \n    // Add two games\n    store.dispatch(addToRecentGames(mockGameSession));\n    store.dispatch(addToRecentGames(anotherGame));\n    \n    // Add first game again\n    store.dispatch(addToRecentGames(mockGameSession));\n    \n    const state = store.getState().launcher;\n    expect(state.recentGames).toHaveLength(2);\n    expect(state.recentGames[0].session_id).toBe('test-session');\n    expect(state.recentGames[1].session_id).toBe('another-session');\n  });\n\n  it('should limit recent games to 5', () => {\n    // Add 6 games\n    for (let i = 0; i < 6; i++) {\n      const game = { ...mockGameSession, session_id: `session-${i}` };\n      store.dispatch(addToRecentGames(game));\n    }\n    \n    const state = store.getState().launcher;\n    expect(state.recentGames).toHaveLength(5);\n    expect(state.recentGames[0].session_id).toBe('session-5');\n    expect(state.recentGames[4].session_id).toBe('session-1');\n  });\n\n  it('should set last played session', () => {\n    store.dispatch(setLastPlayed(mockGameSession));\n    \n    const state = store.getState().launcher;\n    expect(state.lastPlayedSession).toEqual(mockGameSession);\n  });\n\n  it('should update favorite genres', () => {\n    const newGenres = ['sci-fi', 'horror'];\n    store.dispatch(updateFavoriteGenres(newGenres));\n    \n    const state = store.getState().launcher;\n    expect(state.favoriteGenres).toEqual(newGenres);\n  });\n\n  it('should toggle quick start enabled', () => {\n    store.dispatch(setQuickStartEnabled(false));\n    \n    let state = store.getState().launcher;\n    expect(state.quickStartEnabled).toBe(false);\n    \n    store.dispatch(setQuickStartEnabled(true));\n    \n    state = store.getState().launcher;\n    expect(state.quickStartEnabled).toBe(true);\n  });\n\n  it('should add favorite genre', () => {\n    store.dispatch(addFavoriteGenre('sci-fi'));\n    \n    const state = store.getState().launcher;\n    expect(state.favoriteGenres).toContain('sci-fi');\n    expect(state.favoriteGenres).toContain('fantasy'); // Original genre should remain\n  });\n\n  it('should not add duplicate favorite genre', () => {\n    store.dispatch(addFavoriteGenre('fantasy')); // Already in initial state\n    \n    const state = store.getState().launcher;\n    expect(state.favoriteGenres.filter(g => g === 'fantasy')).toHaveLength(1);\n  });\n\n  it('should remove favorite genre', () => {\n    // Add a genre first\n    store.dispatch(addFavoriteGenre('sci-fi'));\n    \n    // Remove it\n    store.dispatch(removeFavoriteGenre('sci-fi'));\n    \n    const state = store.getState().launcher;\n    expect(state.favoriteGenres).not.toContain('sci-fi');\n    expect(state.favoriteGenres).toContain('fantasy'); // Original should remain\n  });\n});